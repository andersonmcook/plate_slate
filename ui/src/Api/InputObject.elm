-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildMenuItemFilter :
    (MenuItemFilterOptionalFields -> MenuItemFilterOptionalFields)
    -> MenuItemFilter
buildMenuItemFilter fillOptionals =
    let
        optionals =
            fillOptionals
                { addedAfter = Absent, addedBefore = Absent, category = Absent, name = Absent, pricedAbove = Absent, pricedBelow = Absent, tag = Absent }
    in
    { addedAfter = optionals.addedAfter, addedBefore = optionals.addedBefore, category = optionals.category, name = optionals.name, pricedAbove = optionals.pricedAbove, pricedBelow = optionals.pricedBelow, tag = optionals.tag }


type alias MenuItemFilterOptionalFields =
    { addedAfter : OptionalArgument Api.ScalarCodecs.Date
    , addedBefore : OptionalArgument Api.ScalarCodecs.Date
    , category : OptionalArgument String
    , name : OptionalArgument String
    , pricedAbove : OptionalArgument Float
    , pricedBelow : OptionalArgument Float
    , tag : OptionalArgument String
    }


{-| Type for the MenuItemFilter input object.
-}
type alias MenuItemFilter =
    { addedAfter : OptionalArgument Api.ScalarCodecs.Date
    , addedBefore : OptionalArgument Api.ScalarCodecs.Date
    , category : OptionalArgument String
    , name : OptionalArgument String
    , pricedAbove : OptionalArgument Float
    , pricedBelow : OptionalArgument Float
    , tag : OptionalArgument String
    }


{-| Encode a MenuItemFilter into a value that can be used as an argument.
-}
encodeMenuItemFilter : MenuItemFilter -> Value
encodeMenuItemFilter input =
    Encode.maybeObject
        [ ( "addedAfter", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDate) |> Encode.optional input.addedAfter ), ( "addedBefore", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDate) |> Encode.optional input.addedBefore ), ( "category", Encode.string |> Encode.optional input.category ), ( "name", Encode.string |> Encode.optional input.name ), ( "pricedAbove", Encode.float |> Encode.optional input.pricedAbove ), ( "pricedBelow", Encode.float |> Encode.optional input.pricedBelow ), ( "tag", Encode.string |> Encode.optional input.tag ) ]


buildMenuItemInput :
    MenuItemInputRequiredFields
    -> (MenuItemInputOptionalFields -> MenuItemInputOptionalFields)
    -> MenuItemInput
buildMenuItemInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { description = Absent }
    in
    { categoryId = required.categoryId, description = optionals.description, name = required.name, price = required.price }


type alias MenuItemInputRequiredFields =
    { categoryId : Api.ScalarCodecs.Id
    , name : String
    , price : Api.ScalarCodecs.Decimal
    }


type alias MenuItemInputOptionalFields =
    { description : OptionalArgument String }


{-| Type for the MenuItemInput input object.
-}
type alias MenuItemInput =
    { categoryId : Api.ScalarCodecs.Id
    , description : OptionalArgument String
    , name : String
    , price : Api.ScalarCodecs.Decimal
    }


{-| Encode a MenuItemInput into a value that can be used as an argument.
-}
encodeMenuItemInput : MenuItemInput -> Value
encodeMenuItemInput input =
    Encode.maybeObject
        [ ( "categoryId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.categoryId |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "name", Encode.string input.name |> Just ), ( "price", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecDecimal) input.price |> Just ) ]


buildOrderItemInput :
    OrderItemInputRequiredFields
    -> OrderItemInput
buildOrderItemInput required =
    { menuItemId = required.menuItemId, quantity = required.quantity }


type alias OrderItemInputRequiredFields =
    { menuItemId : Api.ScalarCodecs.Id
    , quantity : Int
    }


{-| Type for the OrderItemInput input object.
-}
type alias OrderItemInput =
    { menuItemId : Api.ScalarCodecs.Id
    , quantity : Int
    }


{-| Encode a OrderItemInput into a value that can be used as an argument.
-}
encodeOrderItemInput : OrderItemInput -> Value
encodeOrderItemInput input =
    Encode.maybeObject
        [ ( "menuItemId", (Api.ScalarCodecs.codecs |> Api.Scalar.unwrapEncoder .codecId) input.menuItemId |> Just ), ( "quantity", Encode.int input.quantity |> Just ) ]


buildPlaceOrderInput :
    PlaceOrderInputRequiredFields
    -> (PlaceOrderInputOptionalFields -> PlaceOrderInputOptionalFields)
    -> PlaceOrderInput
buildPlaceOrderInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { customerNumber = Absent }
    in
    { customerNumber = optionals.customerNumber, items = required.items }


type alias PlaceOrderInputRequiredFields =
    { items : List OrderItemInput }


type alias PlaceOrderInputOptionalFields =
    { customerNumber : OptionalArgument Int }


{-| Type for the PlaceOrderInput input object.
-}
type alias PlaceOrderInput =
    { customerNumber : OptionalArgument Int
    , items : List OrderItemInput
    }


{-| Encode a PlaceOrderInput into a value that can be used as an argument.
-}
encodePlaceOrderInput : PlaceOrderInput -> Value
encodePlaceOrderInput input =
    Encode.maybeObject
        [ ( "customerNumber", Encode.int |> Encode.optional input.customerNumber ), ( "items", (encodeOrderItemInput |> Encode.list) input.items |> Just ) ]
