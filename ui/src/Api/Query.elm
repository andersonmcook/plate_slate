-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Query exposing (..)

import Api.Enum.SortOrder
import Api.InputObject
import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


categories :
    SelectionSet decodesTo Api.Object.Category
    -> SelectionSet (List decodesTo) RootQuery
categories object_ =
    Object.selectionForCompositeField "categories" [] object_ (identity >> Decode.list)


type alias MenuItemsOptionalArguments =
    { filter : OptionalArgument Api.InputObject.MenuItemFilter
    , order : OptionalArgument Api.Enum.SortOrder.SortOrder
    }


{-| The list of available items on the menu
-}
menuItems :
    (MenuItemsOptionalArguments -> MenuItemsOptionalArguments)
    -> SelectionSet decodesTo Api.Object.MenuItem
    -> SelectionSet (List decodesTo) RootQuery
menuItems fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { filter = Absent, order = Absent }

        optionalArgs =
            [ Argument.optional "filter" filledInOptionals.filter Api.InputObject.encodeMenuItemFilter, Argument.optional "order" filledInOptionals.order (Encode.enum Api.Enum.SortOrder.toString) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "menuItems" optionalArgs object_ (identity >> Decode.list)


type alias SearchRequiredArguments =
    { matching : String }


search :
    SearchRequiredArguments
    -> SelectionSet decodesTo Api.Interface.SearchResult
    -> SelectionSet (Maybe (List (Maybe decodesTo))) RootQuery
search requiredArgs object_ =
    Object.selectionForCompositeField "search" [ Argument.required "matching" requiredArgs.matching Encode.string ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)
