-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.DateFormat exposing (..)

import Json.Decode as Decode exposing (Decoder)


{-| date format type

  - Relative - human readable time elapsed

-}
type DateFormat
    = MmmDdYyyy
    | Relative


list : List DateFormat
list =
    [ MmmDdYyyy, Relative ]


decoder : Decoder DateFormat
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "MMM_DD_YYYY" ->
                        Decode.succeed MmmDdYyyy

                    "RELATIVE" ->
                        Decode.succeed Relative

                    _ ->
                        Decode.fail ("Invalid DateFormat type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : DateFormat -> String
toString enum =
    case enum of
        MmmDdYyyy ->
            "MMM_DD_YYYY"

        Relative ->
            "RELATIVE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe DateFormat
fromString enumString =
    case enumString of
        "MMM_DD_YYYY" ->
            Just MmmDdYyyy

        "RELATIVE" ->
            Just Relative

        _ ->
            Nothing
