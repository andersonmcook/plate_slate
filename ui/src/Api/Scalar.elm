-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Scalar exposing (Codecs, Date(..), Decimal(..), Id(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Date
    = Date String


type Decimal
    = Decimal String


type Id
    = Id String


defineCodecs :
    { codecDate : Codec valueDate
    , codecDecimal : Codec valueDecimal
    , codecId : Codec valueId
    }
    -> Codecs valueDate valueDecimal valueId
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueDate valueDecimal valueId
    ->
        { codecDate : Codec valueDate
        , codecDecimal : Codec valueDecimal
        , codecId : Codec valueId
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueDate valueDecimal valueId
    = Codecs (RawCodecs valueDate valueDecimal valueId)


type alias RawCodecs valueDate valueDecimal valueId =
    { codecDate : Codec valueDate
    , codecDecimal : Codec valueDecimal
    , codecId : Codec valueId
    }


defaultCodecs : RawCodecs Date Decimal Id
defaultCodecs =
    { codecDate =
        { encoder = \(Date raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Date
        }
    , codecDecimal =
        { encoder = \(Decimal raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Decimal
        }
    , codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    }
